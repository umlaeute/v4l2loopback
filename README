v4l2loopback - a kernel module to create V4L2 loopback devices
==============================================================

this module allows you to create "virtual video devices"
normal (v4l2) applications will read these devices as if they were ordinary
video devices, but the video will not be read from e.g. a capture card but
instead it is generated by another application.
this allows you for instance to apply apply some nifty video effects on your
Skype video...
it also allows some more serious things (e.g. I've been using it to add
streaming capabilities to an application by the means of hooking GStreamer into
the loopback devices).

--- NEWS ---
to get the main features of each new release, see the NEWS file.
you could also have a look at the ChangeLog (which gets automatically generated and might 
only be of limited use...


--- ISSUES ---
for current issues, checkout https://github.com/umlaeute/v4l2loopback/issues
please use the issue-tracker for reporting any problems

--- BUILD ---
to build the kernel module run "make".
this should give you a file named "v4l2loopback.ko", which is the kernel module

--- INSTALL ---
to install the module run "make install" (you might have to be 'root' to have
all necessary permissions to install the module).

if your system has "sudo", do:
$ make && sudo make install

if your system lacks "sudo", do:
$ make
$ su
(enter root password)
# make install
# exit

--- RUN ---
Load the v4l2loopback module as root :
# modprobe v4l2loopback

using sudo use:
$ sudo modprobe v4l2loopback

this will create an additional video-device, e.g. /dev/video0 (the number
depends on whether you already had video devices on your system), which can be
fed by various programs.
tested feeders:
	GStreamer: using the  "v4l2sink" element 
	Gem(>=0.93) using the "recordV4L2" plugin
in theory most programs capable of _writing to_ a v4l2 device should work.

the data sent to the v4l2loopback device can then be read by any v4l2-capable
application.

you can find a number of scenarios on the wiki at
	http://github.com/umlaeute/v4l2loopback/wiki

--- OPTIONS ---
if you need several independent loopback devices, you can pass the "devices"
option, when loading the module; e.g.
# modprobe v4l2loopback devices=4
will give you 4 loopback devices (e.g. /dev/video1 ... /dev/video5)
you can also specify the device IDs manually; e.g.
# modprobe v4l2loopback video_nr=3,4,7
will create 3 devices (/dev/video3 /dev/video4 & /dev/video7)

--- ATTRIBUTES ---
you can set and/or query some per-device attributes via sysfs, in a human
readable format. see
 /sys/devices/virtual/video4linux/video*/

--- IDLE FRAME GENERATION ---
when the writer process dies or doesn't feed enough frames, the module will
continue producing video output on its own, in order to sustain FPS specified
in 'idle_fps' sysfs attribute. It will be sending duplicates of last received
frame; if 'placeholder_delay' msecs pass without any new input seen,
contents of the placeholder buffer will be sent. By default it is zero-filled;
you can override it with a custom picture using command like:
# v4l2loopback set-placeholder service_unavailable.png [/dev/videoX]
it relies on GStreamer for format conversion.

this feature can be disabled by setting 'idle_fps' to 0.
switching to placeholder can be disabled by setting 'placeholder_delay' attr
to -1.

--- FIXED CAPS DEVICE CREATION ---
# v4l2loopback create "video/x-raw-yuv,width=640,height=480;any;video/x-raw-yuv,width=320,height=200"
this command will remove (if needed) the module, modprobe it back (creating 3 devices),
set 'keep_format' sysfs setting to 1 for first and third ones, and output a frame in corresponding format to
them. So, without a process writing there, readers can open these devices and get placeholder frames.
The second device (with 'any' spec) will receive no special handling and will always return to uninitialized state
when there are no processes using it.

--- KERNELs ---
the original module has been developed for linux-2.6.28;
i don't have a system with such an old kernel anymore, so i don't know whether
it still works.
further development has been done mainly on linux-2.6.32 and linux-2.6.35, with
newer kernels being continually tested as they enter debian.
support:
 <= 2.6.27		definitely will NOT work
 2.6.28 - 2.6.31	may work (seems to compile but i cannot test)
 >= 2.6.32		should work
 >= 3.0.0		should work as well

--- DISTRIBUTIONS ---
v4l2loopack is now (2010-10-13) available as a Debian-package.
This means, that it is also part of Debian-derived distributions, including
Ubuntu (starting with natty).
The most convenient way is to install the package "v4l2loopback-dkms".
This should automatically build and install the module for your current kernel
(provided you have the matching kernel-headers installed).
Another option is to install the "v4l2loopback-source" package.
In this case you should be able to simply do (as root):
# aptitude install v4l2loopback-source module-assistant
# module-assistant auto-install v4l2loopback-source

--- DOWNLOAD ---
the most up-to-date version of this module can be found at
http://github.com/umlaeute/v4l2loopback/.

--- LICENSE/COPYING ---
Copyright (c) 2010-2011 IOhannes m zmoelnig <zmoelnig@iem.at>
Copyright (c) 2011 Stefan Diewald (stefan.diewald@mytum.de)
Copyright (c) 2010 Scott Maines <smaines@alaya.com>
Copyright (c) 2009 Gorinich Zmey
Copyright (c) 2005-2009 Vasily Levin

    This package is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This package is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>.


